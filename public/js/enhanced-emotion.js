// Ìñ•ÏÉÅÎêú Í∞êÏ†ï Î∂ÑÏÑù Í∏∞Îä• (AI ÌÜµÌï© Î≤ÑÏ†Ñ)
import { offlineStorage } from './offline-storage.js';

export class EnhancedEmotion {
  constructor() {
    // 24Í∞ÄÏßÄ ÌôïÏû•Îêú Í∞êÏ†ï ÌÉÄÏûÖ
    this.emotions = {
      // Í∏çÏ†ï Í∞êÏ†ï
      joy: {
        label: 'üòÑ Í∏∞ÏÅ®',
        color: '#74c0fc',
        category: 'positive',
        intensity: ['Í∏∞ÏÅ®', 'ÎßåÏ°±', 'ÌôòÌù¨', 'ÌñâÎ≥µ'],
        keywords: ['Í∏∞ÏÅò', 'ÌñâÎ≥µ', 'Ï¢ã', 'ÏõÉ', 'Ï¶êÍ±∞', 'Ïã†ÎÇò', 'ÎßåÏ°±', 'ÎøåÎìØ']
      },
      contentment: {
        label: 'üòä ÎßåÏ°±',
        color: '#69db7c',
        category: 'positive',
        intensity: ['ÌèâÏïà', 'ÎßåÏ°±', 'Ï∂©Ï°±', 'ÌñâÎ≥µ'],
        keywords: ['ÎßåÏ°±', 'Ï∂©Î∂Ñ', 'Í¥úÏ∞Æ', 'Ï¢ã', 'Ìé∏Ïïà', 'ÏïåÎßû']
      },
      gratitude: {
        label: 'üôè Í∞êÏÇ¨',
        color: '#ffd43b',
        category: 'positive',
        intensity: ['Í≥†ÎßàÏõÄ', 'Í∞êÏÇ¨', 'Í∞êÎèô', 'ÍπäÏùÄ Í∞êÏÇ¨'],
        keywords: ['Í∞êÏÇ¨', 'Í≥†Îßà', 'Í≥†Îßô', 'Í∞êÎèô', 'ÏùÄÌòú', 'Ï∂ïÎ≥µ']
      },
      love: {
        label: '‚ù§Ô∏è ÏÇ¨Îûë',
        color: '#ff6b9d',
        category: 'positive',
        intensity: ['Ïï†Ï†ï', 'Ï¢ãÏïÑÌï®', 'ÏÇ¨Îûë', 'ÍπäÏùÄ ÏÇ¨Îûë'],
        keywords: ['ÏÇ¨Îûë', 'Ï¢ãÏïÑ', 'Ïï†Ï†ï', 'ÎßàÏùå', 'ÏÜåÏ§ë', 'ÏïÑÎÅº']
      },
      excitement: {
        label: 'ü§© Ìù•Î∂Ñ/ÏÑ§Î†ò',
        color: '#ff8cc8',
        category: 'positive',
        intensity: ['Í¥ÄÏã¨', 'Ìù•ÎØ∏', 'ÏÑ§Î†ò', 'Ìù•Î∂Ñ'],
        keywords: ['Ïã†ÎÇò', 'Ìù•ÎØ∏', 'Ïû¨ÎØ∏', 'Î©ãÏßÄ', 'ÏôÄÏö∞', 'ÎåÄÎ∞ï', 'ÏµúÍ≥†', 'ÏÑ§Î†à']
      },
      pride: {
        label: 'üò§ ÏûêÎ∂ÄÏã¨',
        color: '#fd7e14',
        category: 'positive',
        intensity: ['ÎøåÎìØÌï®', 'ÏûêÎûëÏä§Îü¨ÏõÄ', 'ÏûêÎ∂ÄÏã¨', 'ÌÅ∞ ÏûêÎ∂ÄÏã¨'],
        keywords: ['ÎøåÎìØ', 'ÏûêÎûë', 'ÏÑ±Ï∑®', 'Ìï¥ÎÉà', 'ÏûòÌñà', 'ÎåÄÎã®']
      },
      hope: {
        label: 'üåü Ìù¨Îßù',
        color: '#fcc419',
        category: 'positive',
        intensity: ['Í∏∞ÎåÄ', 'Î∞îÎûå', 'Ìù¨Îßù', 'Í∞ïÌïú Ìù¨Îßù'],
        keywords: ['Ìù¨Îßù', 'Í∏∞ÎåÄ', 'Î∞îÎùº', 'ÍøàÍæ∏', 'Í∏∞Ïõê', 'ÏÜåÎßù']
      },
      relief: {
        label: 'üòå ÏïàÎèÑ',
        color: '#51cf66',
        category: 'positive',
        intensity: ['Í∞ÄÎ≤ºÏõÄ', 'ÏïàÎèÑ', 'Ìé∏ÏïàÌï®', 'ÌÅ∞ ÏïàÎèÑ'],
        keywords: ['ÏïàÎèÑ', 'Îã§Ìñâ', 'Ìé∏Ïïà', 'ÌõÑÎ†®', 'Í∞ÄÎ≤ºÏõå', 'Ìï¥Í≤∞']
      },

      // Î∂ÄÏ†ï Í∞êÏ†ï
      sadness: {
        label: 'üò¢ Ïä¨Ìîî',
        color: '#74c0fc',
        category: 'negative',
        intensity: ['ÏïÑÏâ¨ÏõÄ', 'Ïã§Îßù', 'Ïä¨Ìîî', 'ÍπäÏùÄ Ïä¨Ìîî'],
        keywords: ['Ïä¨ÌîÑ', 'Ïö∞Ïö∏', 'ÏïÑÏâΩ', 'Ïã§Îßù', 'ÌóàÌÉà', 'Ïô∏Î°ú', 'ÎààÎ¨º']
      },
      grief: {
        label: 'üò≠ ÎπÑÌÉÑ',
        color: '#495057',
        category: 'negative',
        intensity: ['ÏÉÅÏã§Í∞ê', 'ÏïÑÌîî', 'ÎπÑÌÉÑ', 'ÍπäÏùÄ ÎπÑÌÉÑ'],
        keywords: ['Ïù¥Î≥Ñ', 'ÏûÉÏóà', 'ÎπÑÌÉÑ', 'Ï†àÎßù', 'ÏÉÅÏã§', 'Í∑∏Î¶¨ÏõÄ']
      },
      anger: {
        label: 'üò† Î∂ÑÎÖ∏',
        color: '#ff8787',
        category: 'negative',
        intensity: ['ÏßúÏ¶ù', 'ÌôîÎÇ®', 'Î∂ÑÎÖ∏', 'Í≤©ÎÖ∏'],
        keywords: ['ÌôîÎÇò', 'ÏßúÏ¶ù', 'Î∂ÑÎÖ∏', 'Ïó¥Î∞õ', 'Îπ°Ïπò', 'ÏÑ±Ïßà', 'ÏñµÏö∏']
      },
      frustration: {
        label: 'üò§ Ï¢åÏ†à',
        color: '#ffa94d',
        category: 'negative',
        intensity: ['ÎßâÌûò', 'ÎãµÎãµÌï®', 'Ï¢åÏ†à', 'ÍπäÏùÄ Ï¢åÏ†à'],
        keywords: ['ÎãµÎãµ', 'ÎßâÎßâ', 'Ï¢åÏ†à', 'ÏïàÎêò', 'ÌûòÎì§', 'Ïñ¥Î†µ']
      },
      anxiety: {
        label: 'üò∞ Î∂àÏïà',
        color: '#ffd43b',
        category: 'negative',
        intensity: ['Í±±Ï†ï', 'Î∂àÏïà', 'Ï¥àÏ°∞', 'Í∑πÎèÑÏùò Î∂àÏïà'],
        keywords: ['Î∂àÏïà', 'Í±±Ï†ï', 'Î¨¥ÏÑú', 'ÎëêÎ†§', 'Ï¥àÏ°∞', 'Í∏¥Ïû•', 'Ïä§Ìä∏Î†àÏä§']
      },
      fear: {
        label: 'üò® ÎëêÎ†§ÏõÄ',
        color: '#6c757d',
        category: 'negative',
        intensity: ['Î∂àÏïà', 'ÎëêÎ†§ÏõÄ', 'Í≥µÌè¨', 'Í∑πÎèÑÏùò Í≥µÌè¨'],
        keywords: ['Î¨¥ÏÑú', 'ÎëêÎ†§', 'Í≥µÌè¨', 'Í≤ÅÎÇò', 'Îñ®Î†§', 'Î¨¥ÏÑúÏõå']
      },
      guilt: {
        label: 'üòî Ï£ÑÏ±ÖÍ∞ê',
        color: '#9775fa',
        category: 'negative',
        intensity: ['ÎØ∏ÏïàÌï®', 'Ï£ÑÏ±ÖÍ∞ê', 'ÏûêÏ±Ö', 'ÍπäÏùÄ Ï£ÑÏ±ÖÍ∞ê'],
        keywords: ['ÎØ∏Ïïà', 'Ï£ÑÏ±Ö', 'ÏûêÏ±Ö', 'ÏûòÎ™ª', 'ÌõÑÌöå', 'Ï£ÑÏÜ°']
      },
      shame: {
        label: 'üò≥ ÏàòÏπòÏã¨',
        color: '#e03131',
        category: 'negative',
        intensity: ['Î∂ÄÎÅÑÎü¨ÏõÄ', 'ÏàòÏπòÏã¨', 'Ï∞ΩÌîºÌï®', 'ÍπäÏùÄ ÏàòÏπòÏã¨'],
        keywords: ['Î∂ÄÎÅÑ', 'Ï∞ΩÌîº', 'ÏàòÏπò', 'Ïñ¥ÏÉâ', 'ÎØºÎßù', 'Ï™ΩÌåîÎ†§']
      },
      loneliness: {
        label: 'üòû Ïô∏Î°úÏõÄ',
        color: '#868e96',
        category: 'negative',
        intensity: ['Ïì∏Ïì∏Ìï®', 'Ïô∏Î°úÏõÄ', 'Í≥†ÎèÖ', 'ÍπäÏùÄ Í≥†ÎèÖ'],
        keywords: ['Ïô∏Î°ú', 'ÌòºÏûê', 'Ïì∏Ïì∏', 'Í≥†ÎèÖ', 'Ï†ÅÎßâ', 'ÌôÄÎ°ú']
      },
      disappointment: {
        label: 'üòï Ïã§Îßù',
        color: '#adb5bd',
        category: 'negative',
        intensity: ['ÏïÑÏâ¨ÏõÄ', 'Ïã§Îßù', 'Ï¢åÏ†à', 'ÍπäÏùÄ Ïã§Îßù'],
        keywords: ['Ïã§Îßù', 'ÏïÑÏâ¨', 'Í∏∞ÎåÄ', 'ÌóõÎêú', 'ÌóàÎ¨¥', 'ÏïàÌÉÄÍπå']
      },

      // Ï§ëÏÑ± Í∞êÏ†ï
      calm: {
        label: 'üòå ÌèâÏò®',
        color: '#51cf66',
        category: 'neutral',
        intensity: ['Ï∞®Î∂Ñ', 'ÌèâÏò®', 'ÏïàÏ†ï', 'ÍπäÏùÄ ÌèâÏò®'],
        keywords: ['Ï∞®Î∂Ñ', 'ÌèâÏò®', 'Í≥†Ïöî', 'Ï°∞Ïö©', 'Ìé∏Ïïà', 'ÏïàÏ†ï', 'Ïó¨Ïú†']
      },
      contemplative: {
        label: 'ü§î ÏÇ¨ÏÉâÏ†Å',
        color: '#9775fa',
        category: 'neutral',
        intensity: ['ÏÉùÍ∞Å', 'ÏÇ¨ÏÉâ', 'ÍπäÏùÄ ÏÉùÍ∞Å', 'Ï≤†ÌïôÏ†Å'],
        keywords: ['ÏÉùÍ∞Å', 'ÏÇ¨ÏÉâ', 'Í≥†ÎØº', 'Ï≤†Ìïô', 'ÏùòÎØ∏', 'ÍπäÏù¥']
      },
      curious: {
        label: 'ü§® Ìò∏Í∏∞Ïã¨',
        color: '#ff922b',
        category: 'neutral',
        intensity: ['Í¥ÄÏã¨', 'Ìò∏Í∏∞Ïã¨', 'Í∞ïÌïú Ìò∏Í∏∞Ïã¨', 'ÌÉêÍµ¨Ïöï'],
        keywords: ['Í∂ÅÍ∏à', 'Ìò∏Í∏∞Ïã¨', 'Í¥ÄÏã¨', 'ÏïåÍ≥†Ïã∂', 'ÌÉêÍµ¨', 'Ïã†Í∏∞']
      },
      nostalgic: {
        label: 'üòå Í∑∏Î¶¨ÏõÄ',
        color: '#da77f2',
        category: 'neutral',
        intensity: ['Ï∂îÏñµ', 'Í∑∏Î¶¨ÏõÄ', 'Ìñ•Ïàò', 'ÍπäÏùÄ Í∑∏Î¶¨ÏõÄ'],
        keywords: ['Í∑∏Î¶Ω', 'Ï∂îÏñµ', 'ÏòõÎÇ†', 'Í≥ºÍ±∞', 'Ìñ•Ïàò', 'Í∑∏Îïå']
      },
      confused: {
        label: 'üòï ÌòºÎûÄ',
        color: '#9775fa',
        category: 'neutral',
        intensity: ['ÏùòÎ¨∏', 'ÌòºÎûÄ', 'Í∞àÎì±', 'ÍπäÏùÄ ÌòºÎûÄ'],
        keywords: ['Ìó∑Í∞à', 'ÌòºÎûÄ', 'Î≥µÏû°', 'Î™®Î•¥Í≤†', 'Í∞àÎì±', 'Ïï†Îß§', 'ÏùòÎ¨∏']
      },
      indifferent: {
        label: 'üòê Î¨¥Í¥ÄÏã¨',
        color: '#ced4da',
        category: 'neutral',
        intensity: ['ÌèâÎ≤î', 'Î¨¥Í¥ÄÏã¨', 'ÎÉâÎã¥', 'ÏôÑÏ†ÑÎ¨¥Í¥ÄÏã¨'],
        keywords: ['ÌèâÎ≤î', 'Î≥¥ÌÜµ', 'Í∑∏ÎÉ•', 'Î¨¥ÎÇú', 'ÏÉÅÍ¥ÄÏóÜ', 'Î≥ÑÎ°ú']
      }
    };
  }

  // ÌôïÏû•Îêú Í∞êÏ†ï Î∂ÑÏÑù (ÌÇ§ÏõåÎìú Í∏∞Î∞ò + AI)
  async analyzeEmotion(content, useAI = true) {
    // 1. Ïò§ÌîÑÎùºÏù∏ Ï∫êÏãú ÌôïÏù∏
    const cachedEmotion = await offlineStorage.getCachedEmotion(content);
    if (cachedEmotion) {
      return {
        emotion: cachedEmotion,
        confidence: 0.8,
        method: 'cache',
        intensity: this.getEmotionIntensity(content, cachedEmotion)
      };
    }

    // 2. ÌÇ§ÏõåÎìú Í∏∞Î∞ò Î∂ÑÏÑù
    const keywordResult = this.analyzeByKeywords(content);

    // 3. AI Î∂ÑÏÑù (Ïò®ÎùºÏù∏ ÏÉÅÌÉúÏóêÏÑúÎßå)
    if (useAI && navigator.onLine) {
      try {
        const aiResult = await this.analyzeByAI(content);

        // AI Í≤∞Í≥ºÏôÄ ÌÇ§ÏõåÎìú Í≤∞Í≥º Í≤∞Ìï©
        const finalEmotion = this.combineResults(keywordResult, aiResult);

        // Í≤∞Í≥º Ï∫êÏãú
        await offlineStorage.cacheEmotionAnalysis(content, finalEmotion.emotion);

        return finalEmotion;
      } catch (error) {
        console.log('AI Î∂ÑÏÑù Ïã§Ìå®, ÌÇ§ÏõåÎìú Î∂ÑÏÑù ÏÇ¨Ïö©:', error);
        return keywordResult;
      }
    }

    return keywordResult;
  }

  // ÌÇ§ÏõåÎìú Í∏∞Î∞ò Í∞êÏ†ï Î∂ÑÏÑù
  analyzeByKeywords(content) {
    const text = content.toLowerCase();
    const scores = {};

    // Í∞Å Í∞êÏ†ïÎ≥Ñ ÌÇ§ÏõåÎìú Îß§Ïπ≠
    Object.entries(this.emotions).forEach(([emotion, data]) => {
      scores[emotion] = 0;
      data.keywords.forEach(keyword => {
        const regex = new RegExp(keyword, 'g');
        const matches = text.match(regex);
        if (matches) {
          scores[emotion] += matches.length;
        }
      });
    });

    // ÏµúÍ≥† Ï†êÏàò Í∞êÏ†ï ÏÑ†ÌÉù
    const maxEmotion = Object.keys(scores).reduce((a, b) =>
      scores[a] > scores[b] ? a : b
    );

    return {
      emotion: maxEmotion || 'neutral',
      confidence: Math.min(scores[maxEmotion] / 3, 1),
      method: 'keywords',
      intensity: this.getEmotionIntensity(content, maxEmotion),
      breakdown: scores
    };
  }

  // Í≥†Í∏â AI Í∞êÏ†ï Î∂ÑÏÑù (GPT-4o Í∏∞Î∞ò)
  async analyzeByAI(content, diaryId = null) {
    try {
      const { supabase } = await import('./supabase.js');
      const { data: { session } } = await supabase.auth.getSession();
      const token = session?.access_token;
      const response = await fetch('/.netlify/functions/advanced-emotion-analysis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          content,
          diaryId,
          analysisType: 'comprehensive'
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();

      return {
        emotions: data.emotions || [{ type: 'neutral', intensity: 50, confidence: 0.5 }],
        overall_mood_score: data.overall_mood_score || 0,
        keywords: data.keywords || [],
        ai_insights: data.ai_insights || '',
        personalized_advice: data.personalized_advice || '',
        complexity_score: data.complexity_score || 0.5,
        similar_entries: data.similar_entries || [],
        method: 'advanced_ai',
        cached: data.cached || false,
        processing_time: data.processing_time || 0
      };
    } catch (error) {
      console.error('Í≥†Í∏â AI Î∂ÑÏÑù Ïã§Ìå®:', error);
      // Í∏∞Î≥∏ AI Î∂ÑÏÑùÏúºÎ°ú Ìè¥Î∞±
      return await this.fallbackAIAnalysis(content);
    }
  }

  // Í∏∞Î≥∏ AI Î∂ÑÏÑù (Ìè¥Î∞±Ïö©)
  async fallbackAIAnalysis(content) {
    try {
      const response = await fetch('/.netlify/functions/analyze-emotion', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ content })
      });

      const data = await response.json();

      return {
        emotions: [{ type: data.emotion, intensity: 70, confidence: 0.8 }],
        overall_mood_score: this.emotionToMoodScore(data.emotion),
        keywords: [],
        ai_insights: 'Í∏∞Î≥∏ Í∞êÏ†ï Î∂ÑÏÑù ÏôÑÎ£å',
        method: 'basic_ai',
        cached: false
      };
    } catch (error) {
      console.error('Í∏∞Î≥∏ AI Î∂ÑÏÑùÎèÑ Ïã§Ìå®:', error);
      return null;
    }
  }

  // Í∞êÏ†ïÏùÑ Í∏∞Î∂Ñ Ï†êÏàòÎ°ú Î≥ÄÌôò
  emotionToMoodScore(emotion) {
    const moodMap = {
      joy: 80, contentment: 60, gratitude: 70, love: 85, excitement: 75,
      pride: 65, hope: 55, relief: 50,
      sadness: -60, grief: -80, anger: -70, frustration: -55, anxiety: -65,
      fear: -75, guilt: -45, shame: -50, loneliness: -60, disappointment: -40,
      calm: 20, contemplative: 10, curious: 30, nostalgic: 0, confused: -10, indifferent: 0
    };
    return moodMap[emotion] || 0;
  }

  // Í≤∞Í≥º Í≤∞Ìï© (AI Ïö∞ÏÑ†, ÌÇ§ÏõåÎìú Î≥¥Ï°∞)
  combineResults(keywordResult, aiResult) {
    // AI Í≤∞Í≥ºÎ•º Ïö∞ÏÑ†ÌïòÎêò, ÌÇ§ÏõåÎìú Í≤∞Í≥ºÎ°ú Î≥¥Ï†ï
    const confidence = keywordResult.confidence > 0.5 &&
                     keywordResult.emotion === aiResult.emotion ?
                     Math.min(aiResult.confidence + 0.1, 1.0) :
                     aiResult.confidence;

    return {
      emotion: aiResult.emotion,
      confidence,
      method: 'combined',
      intensity: aiResult.intensity,
      breakdown: keywordResult.breakdown
    };
  }

  // Í∞êÏ†ï Í∞ïÎèÑ Í≥ÑÏÇ∞
  getEmotionIntensity(content, emotion) {
    const text = content.toLowerCase();
    const length = content.length;

    // Í∞ïÏ°∞ ÌëúÌòÑ Í∞êÏßÄ
    const emphasisCount = (text.match(/[!]{2,}|[?]{2,}|[.]{3,}/g) || []).length;
    const capsCount = (content.match(/[A-Z]{2,}/g) || []).length;

    // Í∏∞Î≥∏ Í∞ïÎèÑ (0-3)
    let intensity = 1;

    // ÌÖçÏä§Ìä∏ Í∏∏Ïù¥Ïóê Îî∞Î•∏ Í∞ïÎèÑ Ï°∞Ï†ï
    if (length > 500) intensity += 1;
    if (length > 1000) intensity += 1;

    // Í∞ïÏ°∞ ÌëúÌòÑÏóê Îî∞Î•∏ Í∞ïÎèÑ Ï°∞Ï†ï
    if (emphasisCount > 0) intensity += Math.min(emphasisCount, 2);
    if (capsCount > 0) intensity += 1;

    return Math.min(Math.max(intensity, 0), 3);
  }

  // Í∞êÏ†ï ÏÑ§Î™Ö ÏÉùÏÑ±
  getEmotionDescription(emotion, intensity) {
    const emotionData = this.emotions[emotion];
    if (!emotionData) return 'Ïïå Ïàò ÏóÜÎäî Í∞êÏ†ï';

    const intensityLabel = emotionData.intensity[intensity] || emotionData.intensity[1];
    return `${emotionData.label} (${intensityLabel})`;
  }

  // Í∞êÏ†ïÎ≥Ñ Ï∂îÏ≤ú ÌôúÎèô
  getRecommendedActivities(emotion, intensity) {
    const activities = {
      happy: [
        'Ï¢ãÏùÄ ÏàúÍ∞ÑÏùÑ ÏÇ¨ÏßÑÏúºÎ°ú ÎÇ®Í≤®Î≥¥ÏÑ∏Ïöî',
        'Í∞êÏÇ¨ ÏùºÍ∏∞Î•º Ïç®Î≥¥ÏÑ∏Ïöî',
        'ÏπúÍµ¨ÎÇò Í∞ÄÏ°±Í≥º Ïù¥ Í∏∞ÏÅ®ÏùÑ ÎÇòÎàÑÏñ¥Î≥¥ÏÑ∏Ïöî',
        'ÏÉàÎ°úÏö¥ Ï∑®ÎØ∏Ïóê ÎèÑÏ†ÑÌï¥Î≥¥ÏÑ∏Ïöî'
      ],
      sad: [
        'Îî∞ÎúªÌïú Ï∞® Ìïú ÏûîÏùÑ ÎßàÏãúÎ©∞ Ìú¥ÏãùÏùÑ Ï∑®ÌïòÏÑ∏Ïöî',
        'Ï¢ãÏïÑÌïòÎäî ÏòÅÌôîÎÇò Ï±ÖÏùÑ Ï¶êÍ≤®Î≥¥ÏÑ∏Ïöî',
        'ÏÇ∞Ï±ÖÏù¥ÎÇò Í∞ÄÎ≤ºÏö¥ Ïö¥ÎèôÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî',
        'Ïã†Î¢∞ÌïòÎäî ÏÇ¨ÎûåÍ≥º ÎåÄÌôîÌï¥Î≥¥ÏÑ∏Ïöî'
      ],
      angry: [
        'ÍπäÍ≤å Ïà®ÏùÑ Îì§Ïù¥Ïâ¨Í≥† ÎÇ¥Ïâ¨Ïñ¥Î≥¥ÏÑ∏Ïöî',
        'Ïö¥ÎèôÏúºÎ°ú ÏóêÎÑàÏßÄÎ•º Î∞úÏÇ∞Ìï¥Î≥¥ÏÑ∏Ïöî',
        'Î¨∏Ï†ú Ìï¥Í≤∞Ï±ÖÏùÑ Ï∞®Í∑ºÏ∞®Í∑º ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî',
        'Ïû†Ïãú ÏãúÍ∞ÑÏùÑ ÎëêÍ≥† ÎßàÏùåÏùÑ Í∞ÄÎùºÏïâÌòÄÎ≥¥ÏÑ∏Ïöî'
      ],
      anxious: [
        'Î™ÖÏÉÅÏù¥ÎÇò ÏöîÍ∞ÄÎ•º ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî',
        'Ìï† ÏùºÏùÑ ÏûëÏùÄ Îã®ÏúÑÎ°ú ÎÇòÎàÑÏñ¥ Ï†ïÎ¶¨Ìï¥Î≥¥ÏÑ∏Ïöî',
        'ÏûêÏó∞ ÏÜçÏóêÏÑú ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Î≥¥ÏÑ∏Ïöî',
        'Ï†ÑÎ¨∏Í∞ÄÏùò ÎèÑÏõÄÏùÑ Î∞õÎäî Í≤ÉÎèÑ Ï¢ãÏäµÎãàÎã§'
      ],
      neutral: [
        'ÏÉàÎ°úÏö¥ Í≤ÉÏùÑ Î∞∞Ïö∞Í±∞ÎÇò ÏãúÎèÑÌï¥Î≥¥ÏÑ∏Ïöî',
        'ÎØ∏Îûò Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥¥ÏÑ∏Ïöî',
        'ÌèâÏÜå ÎØ∏Î§ÑÏôîÎçò ÏùºÏùÑ Ï†ïÎ¶¨Ìï¥Î≥¥ÏÑ∏Ïöî',
        'ÏûêÍ∏∞ ÏÑ±Ï∞∞Ïùò ÏãúÍ∞ÑÏùÑ Í∞ÄÏ†∏Î≥¥ÏÑ∏Ïöî'
      ]
    };

    return activities[emotion] || activities.neutral;
  }

  // Í∞êÏ†ï ÌÜµÍ≥Ñ Í≥ÑÏÇ∞
  calculateEmotionStats(diaryEntries) {
    const stats = {
      total: diaryEntries.length,
      emotions: {},
      trends: {},
      averageIntensity: 0
    };

    // Í∞êÏ†ïÎ≥Ñ Ïπ¥Ïö¥Ìä∏
    Object.keys(this.emotions).forEach(emotion => {
      stats.emotions[emotion] = 0;
    });

    diaryEntries.forEach(entry => {
      if (stats.emotions[entry.emotion] !== undefined) {
        stats.emotions[entry.emotion]++;
      }
    });

    // ÏµúÍ∑º 7Ïùº Ìä∏Î†åÎìú
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);

    const recentEntries = diaryEntries.filter(entry =>
      new Date(entry.created_at) >= weekAgo
    );

    stats.trends.recent = recentEntries.length;
    stats.trends.improvement = this.calculateImprovementTrend(recentEntries);

    return stats;
  }

  // Í∞úÏÑ† Ìä∏Î†åÎìú Í≥ÑÏÇ∞
  calculateImprovementTrend(entries) {
    if (entries.length < 2) return 0;

    const emotionScores = {
      happy: 2, excited: 2, peaceful: 1,
      neutral: 0,
      confused: -0.5, anxious: -1, sad: -1, angry: -2
    };

    const scores = entries.map(entry => emotionScores[entry.emotion] || 0);
    const firstHalf = scores.slice(0, Math.floor(scores.length / 2));
    const secondHalf = scores.slice(Math.floor(scores.length / 2));

    const firstAvg = firstHalf.reduce((a, b) => a + b, 0) / firstHalf.length;
    const secondAvg = secondHalf.reduce((a, b) => a + b, 0) / secondHalf.length;

    return secondAvg - firstAvg;
  }
}